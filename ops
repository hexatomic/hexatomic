{"version":1,"ops":[{"type":6,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1571860307,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDI5NzY2MDc3Mw=="},"target":"d8e94d1671bf18f4cdf0c9b0ed6034fb09af37481e5ee09a9fe17b949415e877","message":"For the same reasons as stated in #59, we should set up exemplary GUI tests, e.g., for the corpus structure editor, using [RCPTT](https://www.eclipse.org/rcptt/), and perhaps [SWTBot](https://www.eclipse.org/swtbot/) where it makes sense.\n\nAgain I think that this should be part of the Dev Platform Milestone, but I'd be happy to push a fix to after the project meeting.\n\n@thomaskrause Perhaps we should create a project meeting milestone to prioritize issues?","files":null},{"type":5,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1571860183,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3MzgzNTA5Njk="},"added":["enhancement"],"removed":[]},{"type":5,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1571860183,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3MzgzNTA5NzA="},"added":["docs-dev-maint"],"removed":[]},{"type":3,"author":{"id":"725ac77188b9c2093ea4100ba878cd5190f5dc34"},"timestamp":1571868638,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0NTY1NzU0Ng==","github-url":"https://github.com/hexatomic/hexatomic/issues/60#issuecomment-545657546"},"message":"We should not add issues to milestones without discussing them first. Its now impossible to distinguish the issues we already agreed on and the ones you added. This is seriously not OK. We did discuss the issue of having GUI tests for the first developer release and as far as I remember we decided against them because of time issues.\n\nIn my opinion, milestones are not a good way of prioritizing issues. Milestones define a specific feature/bug set with a given deadline. Moving a lot of issues from one milestone to another because the deadline was missed causes additional management overhead. In the end you just put every issue to the milestone, and moving these \"not so important\" issues from milestone to milestone until there is no distinction between the \"All issues\" and \"what we have to do for this milestone\". Also, it is not good for the morale if a milestone just keeps piling up issues and never actually converges to 100%. It is also bad for project planning if you can't know if you are on track implementing the milestone in time.\n\nI would propose to add issues only to a milestone after the planning phase if\n- it turns out we missed something very important or something is a pre-condition for another issue already in the milestone: this must be done in coordination with the participating parties of a milestone\n- we finish all issues for a milestone before the deadline and have time to include new issues \n\nI also think that having an actual developer releases *before* our project meeting is still important for our progress. How we call this release is not as important (\"Development Platform Preview\"?) but having performed an actual release with all the automated steps etc. is an important experience which outcome we have to discuss in the meeting. Not the planning, but how it went.","files":null},{"type":3,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1571872695,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0NTY3NTE5OQ==","github-url":"https://github.com/hexatomic/hexatomic/issues/60#issuecomment-545675199"},"message":"\u003e We should not add issues to milestones without discussing them first. Its now impossible to distinguish the issues we already agreed on and the ones you added.\n\nNo, the new ones are #57, #59, #60. \n\n#57 is minor, but an omission.\nWhy I put in #59 and #60 is explained below.\n\n\u003e This is seriously not OK. We did discuss the issue of having GUI tests for the first developer release and as far as I remember we decided against them because of time issues.\n\nI think it is okay with respect to the definition of *milestone*, cf. below, and not okay as it shows that we lack a better process for planning our work. I don't see this as a huge problem right now, as we haven't had much hands-on experience yet in terms of working along the process. It's part of the learning curve to figure out a better process. Part of this is a) using an agreed-upon definition of milestone (i.e., the deadline is not part of the actual milestone), and b) defining milestones and the work towards them *before* starting the work (which we haven't done really in this case).\n\n\u003e In my opinion, milestones are not a good way of prioritizing issues. Milestones define a specific feature/bug set with a given deadline. Moving a lot of issues from one milestone to another because the deadline was missed causes additional management overhead. In the end you just put every issue to the milestone, and moving these \"not so important\" issues from milestone to milestone until there is no distinction between the \"All issues\" and \"what we have to do for this milestone\". Also, it is not good for the morale if a milestone just keeps piling up issues and never actually converges to 100%. It is also bad for project planning if you can't know if you are on track implementing the milestone in time.\n\nAgree. But the PM/SE definition of milestone places importance on the result, not the duration, and not the deadline. A milestone is the completion and approval of a deliverable, for example, not the fact that it has happened by a specific date. I think the problem we've run into here is that we haven't carved out a well-defined milestone of \"Dev Platform\" before starting the work. IMHO, providing the framework for the basics of good practice (here: GUI and unit tests) is part of the deliverable, the completion of which is defined by the milestone. If we overrun, we overrun, but the milestone stays the same. Also I think mixing (rudiments of) agile and plan-based methods hasn't worked well so far. \n\nI, too, think that pushing \"not so important\" or in fact any issues down a series of milestone is useless and detrimental. But so is cutting down deliverables in order to meet a deadline.\n\n\u003e I would propose to add issues only to a milestone after the planning phase if\n\nYes, stressing that we do actually need a planning phase. And smaller milestones (this one's been cut out way too big).\n\n\u003e     * it turns out we missed something very important or something is a pre-condition for another issue already in the milestone: this must be done in coordination with the participating parties of a milestone\n\u003e \n\u003e     * we finish all issues for a milestone before the deadline and have time to include new issues\n\nAgree.\n \n\u003e I also think that having an actual developer releases _before_ our project meeting is still important for our progress. How we call this release is not as important (\"Development Platform Preview\"?) but having performed an actual release with all the automated steps etc. is an important experience which outcome we have to discuss in the meeting. Not the planning, but how it went.\n\nSure. How about we start tomorrow morning with 1) defining the Platform milestone and what should be in it, and 2) defining a Preview milestone to collect relevant issues for the project meeting, then divide the assigned issues over the two. This will maybe cost us an hour but will have the effect that we have a defined (and more motivating) goal for the meeting release, but don't have to neglect important parts of the \"platform\" release due to time pressure.\n\nFor the future, we should implement a separate planning phase more clearly.\n\nNight night.","files":null},{"type":6,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1571872695,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDI5Nzc2MDExNg=="},"target":"f7a636a8f9f18f2955e619f09e4e4ffd2967e2776eff63a0a311683b5ff62d54","message":"\u003e We should not add issues to milestones without discussing them first. Its now impossible to distinguish the issues we already agreed on and the ones you added.\n\nNo, the new ones are #57, #59, #60. \n\n#57 is minor, but an omission.\nWhy I put in #59 and #60 is explained below.\n\n\u003e This is seriously not OK. We did discuss the issue of having GUI tests for the first developer release and as far as I remember we decided against them because of time issues.\n\nI think it is okay with respect to the definition of *milestone*, cf. below, and not okay as it shows that we lack a better process for planning our work. I don't see this as a huge problem right now, as we haven't had much hands-on experience yet in terms of working along the process. It's part of the learning curve to figure out a better process. Part of this is a) using an agreed-upon definition of milestone (i.e., the deadline is not part of the actual milestone), and b) defining milestones and the work towards them *before* starting the work (which we haven't done really in this case).\n\n\u003e In my opinion, milestones are not a good way of prioritizing issues. Milestones define a specific feature/bug set with a given deadline. Moving a lot of issues from one milestone to another because the deadline was missed causes additional management overhead. In the end you just put every issue to the milestone, and moving these \"not so important\" issues from milestone to milestone until there is no distinction between the \"All issues\" and \"what we have to do for this milestone\". Also, it is not good for the morale if a milestone just keeps piling up issues and never actually converges to 100%. It is also bad for project planning if you can't know if you are on track implementing the milestone in time.\n\nAgree. But the PM/SE definition of milestone places importance on the result, not the duration, and not the deadline. A milestone is the completion and approval of a deliverable, for example, not the fact that it has happened by a specific date. I think the problem we've run into here is that we haven't carved out a well-defined milestone of \"Dev Platform\" before starting the work. IMHO, providing the framework for the basics of good practice (here: GUI and unit tests) is part of the deliverable, the completion of which is defined by the milestone. If we overrun, we overrun, but the milestone stays the same. Also I think mixing (rudiments of) agile and plan-based methods hasn't worked well so far. \n\nI, too, think that pushing \"not so important\" or in fact any issues down a series of milestone is useless and detrimental. But so is cutting down deliverables in order to meet a deadline.\n\n\u003e I would propose to add issues only to a milestone after the planning phase if\n\nYes, stressing that we do actually need a planning phase. And smaller milestones (this one's been cut out way too big).\n\n\u003e     * it turns out we missed something very important or something is a pre-condition for another issue already in the milestone: this must be done in coordination with the participating parties of a milestone\n\u003e \n\u003e     * we finish all issues for a milestone before the deadline and have time to include new issues\n\nAgree.\n \n\u003e I also think that having an actual developer releases _before_ our project meeting is still important for our progress. How we call this release is not as important (\"Development Platform Preview\"?) but having performed an actual release with all the automated steps etc. is an important experience which outcome we have to discuss in the meeting. Not the planning, but how it went.\n\nSure. How about we start tomorrow morning with 1) defining the Platform milestone and what should be in it, and 2) defining a Preview milestone to collect relevant issues for the project meeting, then divide the assigned issues over the two. This will maybe cost us an hour but will have the effect that we have a defined (and more motivating) goal for the meeting release, but don't have to neglect important parts of the \"platform\" release due to time pressure. Alternatively, we can push the discussion of the Platform milestone to at/after the meeting.\n\nFor the future, we should implement a separate planning phase more clearly.\n\nNight night.","files":null},{"type":3,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1571899971,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU0NTc3MzE3NQ==","github-url":"https://github.com/hexatomic/hexatomic/issues/60#issuecomment-545773175"},"message":"So, as a way of going forward with this, I propose to create another milestone \"Preview Platform\"\nand assigned it the following issues:\n\n#16, #23, #29, #32, #33, #35, #39, #41, #42, #44, #47, #57 \n\nThis is the set of issues originally assigned to the Dev Platform Milestone.\n\nTo the Dev Platform Milestone, I'd start with assigning #59, #60.  \nAt a point in the future (I suggest the project meeting itself, or directly after it), we should then do the work to define this milestone properly.  \nI think the project meeting would be a good place because we will likely discuss further future milestones up until the February 2020 Beta release, which will have to build on the Dev Platform release.","files":null},{"type":5,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1571903589,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDI3Mzk3MTc4MTU="},"added":["docs-dev-maint"],"removed":[]}]}