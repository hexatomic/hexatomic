{"version":1,"ops":[{"type":1,"author":{"id":"7fc094c5f01526c965e541ec82007c487f6fa288"},"timestamp":1591612885,"metadata":{"github-id":"MDU6SXNzdWU2MzQ0OTgzNzg=","github-url":"https://github.com/hexatomic/hexatomic/issues/196","origin":"github"},"title":"Support for Systemic Functional Grammar annotations","message":"Excerpted from @costezki email.\n\n**Describe the solution you'd like**\n\n\u003e A special constituency annotation structure specific to Systemic Functional Grammar with a UI. \n\u003e The annotation structure corresponds to a constituency tree with labelled edges, and where nodes, hold a class and a set of \"arbitrary\" features (key-value pairs). There is a need for multiple layers as well, and so multiple parallel trees are possible (each corresponding to a type of analysis, e.g. syntactic, thematic, semantic, etc.). I need to be able to design a scheme of edge labels, and of unit classes. Moreover, I would need to constraint the unit class to allow children of only specific classes, connected via specific edges. That means that there is a range of valid children edge labels and node classes for a given parent unit class. \n\n### Requirements:\n\n- [ ] **Constituency trees:** Possible in Salt, possible in the graph editor.\n- [ ] **Labelled edges:** Possible in Salt, possible in the graph editor.\n- [ ] **Nodes hold a class:** Salt knows node classes `Structure` (hierarchical node), `Span` (spanning tokens), `Token`. If other classes are needed, they could be implemented as (1) annotations on the nodes, (2) meta annotations on the nodes, (3) implicitly via layers.\n- [ ] **Nodes can hold sets of arbitrary key-value pairs:** Possible in Salt, possible in the graph editor.\n- [ ] **Multiple layers possible:** Possible in Salt (`SLayer`), _currently not explicitly possible in editors_, can be implemented as (1) explicit layer assignment, (2) layer annotations on nodes (retrievable via search).\n- [ ] **\"Scheme\" of edge labels:** Is this a \"tagset\" for edge labels? Could be supported in Hexatomic as generic tagset support.\n- [ ] **\"Scheme of unit classes\":** Depending on how classes are solved, can be supported simply via annotations, or explicitly via tagset support.\n- [ ] **Constraints on children classes depending on parent class, and specific edges:** Possible to implement via the UI, not the data model. Depending on how unit classes are identified, this could be support for a specific annotation scheme with the respective constraints on children \u0026 edge labels.\n\n**Describe alternatives you've considered**\n\n~A clear and concise description of any alternative solutions or features you've considered.~\n\n**Additional context**\n\nCould be interesting features for this specific use case, but also other use cases, especially the restrictions on children nodes and edge labels, i.e., \"annotation scheme support\".","files":null}]}